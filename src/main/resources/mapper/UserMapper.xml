<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.msa2024.users.UserMapper">
    <!--
    테이블 스크립트
    CREATE TABLE `tb_member2` (
        `member_id` VARCHAR(50) NOT NULL COMMENT '회원아이디' COLLATE 'utf8mb4_general_ci',
        `member_pwd` VARCHAR(100) NOT NULL COMMENT '회원비밀번호' COLLATE 'utf8mb4_general_ci',
        `member_name` VARCHAR(100) NOT NULL COMMENT '회원이름' COLLATE 'utf8mb4_general_ci',
        `member_address` VARCHAR(100) NOT NULL COMMENT '회원 집 주소' COLLATE 'utf8mb4_general_ci',
        `member_phone_number` VARCHAR(13) NOT NULL COMMENT '회원 전화번호' COLLATE 'utf8mb4_general_ci',
        `member_gender` VARCHAR(10) NOT NULL COMMENT '회원 성별' COLLATE 'utf8mb4_general_ci',
        `member_reg_date` DATETIME NOT NULL DEFAULT current_timestamp() COMMENT '회원가입일시',
        `member_update_date` DATETIME NOT NULL DEFAULT current_timestamp() COMMENT '회원정보수정일시',
        `member_roles` VARCHAR(200) NOT NULL DEFAULT 'USER' COLLATE 'utf8mb4_general_ci',
        `member_account_expired` CHAR(1) NOT NULL DEFAULT 'N' COLLATE 'utf8mb4_general_ci',
        `member_account_locked` CHAR(1) NOT NULL DEFAULT 'N' COLLATE 'utf8mb4_general_ci',
        `member_login_count` INT(11) NOT NULL DEFAULT '0',
        `member_last_login_time` TIMESTAMP NOT NULL DEFAULT current_timestamp()
        PRIMARY KEY (`member_id`) USING BTREE
    )
    ENGINE=InnoDB
    ;
     -->


    <select id="login" resultType="MemberVO">
        select
            *
        from tb_member
        where member_id = #{member_id}
    </select>
    <select id="findMemberByUsername" resultType="MemberVO">
        SELECT * FROM tb_member WHERE member_id = #{username}
    </select>

    <update id="updateMemberLastLogin">
        update tb_member set
            member_last_login_time = now()
        where member_id = #{member_id}
    </update>

    <update id="loginCountInc">
        update tb_member set
        member_login_count = member_login_count + 1,
        member_account_locked = CASE
        WHEN member_login_count >= 2 THEN 'Y'  <!-- Adjusted to lock after 3 attempts -->
        ELSE 'N'
        END,
        lockout_time = CASE
        WHEN member_login_count >= 2 THEN NOW()  <!-- Sets lockout time when locking the account -->
        ELSE lockout_time
        END
        where member_id = #{member_id}
    </update>


    <update id="loginCountClear">
        update tb_member set
            member_login_count = 0
                            ,member_account_locked = 'N'
        where member_id = #{member_id}
    </update>
    <update id="unlockExpiredLockedAccounts">
        UPDATE tb_member
        SET member_account_locked = 'N', lockout_time = NULL, member_login_count = 0
        WHERE member_account_locked = 'Y' AND TIMESTAMPDIFF(MINUTE, lockout_time, NOW()) >= 10
    </update>

    <select id="checkDuplicateMemberId" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM tb_member WHERE member_id = #{member_id}
    </select>
    <insert id="signup" parameterType="MemberVO">
        INSERT INTO tb_member (
            member_id,
            member_name,
            member_pwd,
            member_phone_number,
            member_address,
            member_detail_address,
            member_gender,
            member_reg_date,
            member_update_date,
            member_login_count
        ) VALUES (
                     #{member_id},
                     #{member_name},
                     #{member_pwd},
                     #{member_phone_number},
                     #{member_address},
                     #{member_detail_address},
                     #{member_gender},
                     NOW(),
                     NOW(),
                     #{member_login_count}
                 )
    </insert>

</mapper>
